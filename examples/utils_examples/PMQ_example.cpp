// #define USE_VECTOR_SORT 1
#include "../../modules/utils/poor_mans_quantum.hpp"
#include <vector>

#include <iostream>
#include <chrono>
#include <map>

int main()
{

    std::vector<float> data1 = {0.1, 0.3, 0.2, 0.4, 0.5, 0.6, 0.7};

    std::vector<double> data2 = {
        3.67318577121409,
        4.81232300464080,
        4.54554010352612,
        2.94836769047915,
        4.39746699579531,
        3.24810526131811,
        5.51626689664595,
        3.96743349080552,
        5.63599965727829,
        3.57494150938997,
        4.58943336671822,
        3.93720877428168,
        1.97804106994821,
        3.01786847422095,
        4.61251129816695,
        3.94511387001132,
        2.88126799754728,
        3.37362146113286,
        4.24951774056280,
        3.00698099345040,
        4.97495022481131,
        3.35929049327394,
        5.80886262051925,
        2.92013374926117,
        4.19918944407526,
        2.47897343823105,
        3.27636887471093,
        3.40674968498920,
        4.40133633981880,
        4.94213331923694,
        4.30048596759573,
        3.62692934136900,
        4.81548850809250,
        4.79888699215672,
        4.12020528195636,
        4.57124762971448,
        4.41279601031139,
        3.01303811664848,
        4.75956832591478,
        3.34279870090165,
        3.39608151862383,
        4.17694682232941,
        3.69249653013725,
        3.86817964708411,
        4.59535767388410,
        5.04683278430523,
        3.80204136738816,
        4.32767816390720,
        3.76169849541027,
        4.22959689322031,
        4.43999790482263,
        3.38313407111077,
        4.27483678691167,
        4.60110203246830,
        4.09230795123896,
        5.72984139157236,
        3.39144255526168,
        3.26294022830219,
        2.25012069361237,
        4.91048257964711,
        4.86708255294733,
        3.92010716094196,
        4.89847598937714,
        4.18370342309125,
        4.29079013488445,
        4.11294471702105,
        4.43995218887244,
        4.10166244370034,
        6.78733522781344,
        2.83333496980536,
        2.14570091731031,
        2.85931885533037,
        2.90665654376040,
        3.56639070352518,
        3.83153012172455,
        3.78146643997342,
        4.54133443571938,
        4.38926620384326,
        4.75122898468833,
        5.77825589929100,
        5.22306255173381,
        2.71674389539523,
        1.67104548371666,
        4.90193146695171,
        2.16436131626481,
        4.06675691143687,
        4.03547948583758,
        6.22716807816787,
        3.93078574597795,
        3.49267693538550,
        4.23580967257624,
        4.24580485189384,
        4.07004520941681,
        3.39141948992005,
        2.77740661981337,
        4.31650036079772,
        2.65713076337807,
        2.96781565592783,
        5.33121588506497,
        3.58109680497015};

    metric::PMQ<metric::Normal> rv0(3.5, 1, 50);

    metric::PMQ rv1(data1);
    metric::PMQ rv2(data2);

    auto rv5 = rv1 * 0.5;
    auto rv6 = rv5 + rv2;

    auto isSignificantEqual = rv6 == rv0;

    std::cout << "is_equal: " << isSignificantEqual << "\%" << std::endl;

    auto isNormalDistributed = rv6.is_normal_distributed();

    std::cout << "is normal distributed: " << isNormalDistributed * 100 << "\%" << std::endl;

    return 0;
}